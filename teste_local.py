# teste_local.py
"""
Script de teste para validar as modifica√ß√µes do sistema C09.
Testa os dois modos de execu√ß√£o sem fazer downloads reais.
"""

import sys
import os
from pathlib import Path

# Adiciona diret√≥rio ao path
sys.path.append(str(Path(__file__).parent))

def testar_modo_candles():
    """Testa modo CANDLES (10 minutos)."""
    print("üß™ TESTANDO MODO CANDLES")
    print("=" * 50)
    
    try:
        # Simula vari√°vel de ambiente
        os.environ["EXECUTION_MODE"] = "CANDLES"
        
        from main import C09Orchestrator
        
        # Inicializa orquestrador
        orchestrator = C09Orchestrator()
        
        # Verifica se detectou modo correto
        if orchestrator.modo_execucao == "CANDLES":
            print("‚úÖ Modo CANDLES detectado corretamente")
        else:
            print(f"‚ùå Esperado CANDLES, obtido {orchestrator.modo_execucao}")
            return False
        
        # Verifica se scraper n√£o foi inicializado (modo r√°pido)
        if orchestrator.scraper is None:
            print("‚úÖ Scraper n√£o inicializado no modo CANDLES (correto)")
        else:
            print("‚ùå Scraper foi inicializado no modo CANDLES (incorreto)")
            return False
        
        print("‚úÖ Teste modo CANDLES passou")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste CANDLES: {e}")
        return False

def testar_modo_completo():
    """Testa modo COMPLETO (1 hora)."""
    print("\nüß™ TESTANDO MODO COMPLETO")
    print("=" * 50)
    
    try:
        # Simula vari√°vel de ambiente
        os.environ["EXECUTION_MODE"] = "COMPLETO"
        
        from main import C09Orchestrator
        
        # Inicializa orquestrador
        orchestrator = C09Orchestrator()
        
        # Verifica se detectou modo correto
        if orchestrator.modo_execucao == "COMPLETO":
            print("‚úÖ Modo COMPLETO detectado corretamente")
        else:
            print(f"‚ùå Esperado COMPLETO, obtido {orchestrator.modo_execucao}")
            return False
        
        # Verifica se scraper foi inicializado
        if orchestrator.scraper is not None:
            print("‚úÖ Scraper inicializado no modo COMPLETO (correto)")
        else:
            print("‚ùå Scraper n√£o foi inicializado no modo COMPLETO (incorreto)")
            return False
        
        print("‚úÖ Teste modo COMPLETO passou")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste COMPLETO: {e}")
        return False

def testar_deteccao_argumentos():
    """Testa detec√ß√£o por argumentos da linha de comando."""
    print("\nüß™ TESTANDO DETEC√á√ÉO POR ARGUMENTOS")
    print("=" * 50)
    
    try:
        # Remove vari√°vel de ambiente
        if "EXECUTION_MODE" in os.environ:
            del os.environ["EXECUTION_MODE"]
        
        # Simula argumento da linha de comando
        sys.argv = ["teste_local.py", "CANDLES"]
        
        from main import C09Orchestrator
        
        # Inicializa orquestrador
        orchestrator = C09Orchestrator()
        
        if orchestrator.modo_execucao == "CANDLES":
            print("‚úÖ Detec√ß√£o por argumentos funcionando")
        else:
            print(f"‚ùå Esperado CANDLES via args, obtido {orchestrator.modo_execucao}")
            return False
        
        # Restaura sys.argv
        sys.argv = ["teste_local.py"]
        
        print("‚úÖ Teste detec√ß√£o argumentos passou")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste argumentos: {e}")
        return False

def testar_analytics_tempo_real():
    """Testa se analytics tempo real est√° funcionando."""
    print("\nüß™ TESTANDO ANALYTICS TEMPO REAL")
    print("=" * 50)
    
    try:
        from config.settings import carregar_config
        from core.analytics_processor import criar_analytics_processor
        
        # Carrega configura√ß√£o
        config = carregar_config()
        
        # Cria processor para RRP
        processor = criar_analytics_processor("RRP", config)
        
        # Verifica se m√©todo existe
        if hasattr(processor, 'processar_tempo_real'):
            print("‚úÖ M√©todo processar_tempo_real existe")
        else:
            print("‚ùå M√©todo processar_tempo_real n√£o encontrado")
            return False
        
        print("‚úÖ Teste analytics tempo real passou")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste analytics: {e}")
        return False

def testar_email_notifier():
    """Testa se sistema de e-mail est√° funcionando."""
    print("\nüß™ TESTANDO SISTEMA DE E-MAIL")
    print("=" * 50)
    
    try:
        from config.settings import carregar_config
        from core.email_notifier import criar_email_notifier
        
        # Carrega configura√ß√£o
        config = carregar_config()
        
        # Cria notificador
        notifier = criar_email_notifier(config)
        
        # Verifica se foi inicializado
        if notifier.username:
            print(f"‚úÖ EmailNotifier inicializado para {notifier.username}")
        else:
            print("‚ùå EmailNotifier n√£o inicializou corretamente")
            return False
        
        # Verifica se templates existem
        if hasattr(notifier, '_gerar_template_alerta_desvio'):
            print("‚úÖ Templates de e-mail dispon√≠veis")
        else:
            print("‚ùå Templates de e-mail n√£o encontrados")
            return False
        
        print("‚úÖ Teste sistema e-mail passou")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste e-mail: {e}")
        return False

def main():
    """Executa todos os testes."""
    print("üöÄ INICIANDO TESTES DO SISTEMA C09 REFATORADO")
    print("=" * 60)
    
    testes = [
        ("Modo CANDLES", testar_modo_candles),
        ("Modo COMPLETO", testar_modo_completo),
        ("Detec√ß√£o Argumentos", testar_deteccao_argumentos),
        ("Analytics Tempo Real", testar_analytics_tempo_real),
        ("Sistema E-mail", testar_email_notifier)
    ]
    
    resultados = []
    
    for nome, teste in testes:
        sucesso = teste()
        resultados.append((nome, sucesso))
    
    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL DOS TESTES")
    print("=" * 60)
    
    sucessos = 0
    falhas = 0
    
    for nome, sucesso in resultados:
        status = "‚úÖ PASSOU" if sucesso else "‚ùå FALHOU"
        print(f"{nome:.<30} {status}")
        
        if sucesso:
            sucessos += 1
        else:
            falhas += 1
    
    print(f"\nüìà RESUMO: {sucessos} sucessos, {falhas} falhas")
    
    if falhas == 0:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema pronto para deploy.")
        return True
    else:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM. Verifique os erros acima.")
        return False

if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)